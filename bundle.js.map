{"version":3,"file":"bundle.js","mappings":"mBAqBO,SAASA,IACd,IAAMC,EAAOC,SAASC,gBAEhBC,EAA4B,SADbH,EAAKI,aAAa,cACI,QAAU,OACrDJ,EAAKK,aAAa,aAAcF,GAChCG,aAAaC,QAAQ,QAASJ,EAChC,CAfA,IAEQK,IADaF,aAAaG,QAAQ,UACO,OAC/CR,SAASC,gBAAgBG,aAAa,aAAcG,GAgBtDP,SAASS,iBAAiB,oBAAoB,WAC5C,IAAMC,EAAkBV,SAASW,eAAe,oBAC5CD,GC3BC,SAAsBE,EAAWC,GACtC,IAAMC,EAASd,SAASe,cAAc,OACtCD,EAAOE,UAAY,SAEnB,IAAMC,EAAOjB,SAASe,cAAc,OACpCE,EAAKD,UAAY,OACjBC,EAAKC,YAAc,SACnBJ,EAAOK,YAAYF,GAEnB,IAAMG,EAAWpB,SAASe,cAAc,MACxCK,EAASJ,UAAY,YAEP,CACZ,CAAEK,KAAM,OAAQC,KAAM,cACtB,CAAED,KAAM,OAAQC,KAAM,mBACtB,CAAED,KAAM,QAASC,KAAM,cACvB,CAAED,KAAM,SAAUC,KAAM,iCAAkCC,OAAQ,WAG9DC,SAAQ,SAAAC,GACZ,IAAMC,EAAK1B,SAASe,cAAc,MAC5BY,EAAI3B,SAASe,cAAc,KACjCY,EAAEL,KAAOG,EAAKH,KACdK,EAAET,YAAcO,EAAKJ,KACjBI,EAAKF,SAAQI,EAAEJ,OAASE,EAAKF,QACjCG,EAAGP,YAAYQ,GACfP,EAASD,YAAYO,EACvB,IAEAZ,EAAOK,YAAYC,GAEnB,IAAMQ,EAAc5B,SAASe,cAAc,UAC3Ca,EAAYC,GAAK,cACjBD,EAAYV,YAAc,KAC1BU,EAAYnB,iBAAiB,QAASI,GACtCC,EAAOK,YAAYS,GAEfhB,GACFA,EAAUO,YAAYL,EAI1B,CDdIgB,CAAapB,EAAiBZ,GEjCXE,SAAS+B,iBAAiB,sBAClCP,SAAQ,SAAAC,GACnB,IAAMH,EAAOG,EAAKtB,aAAa,QAC3BmB,GACFU,MAAMV,GACHW,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASb,OAElB,MAAM,IAAIe,MAAM,qBAADC,OAAsBf,GACvC,IAAE,OACK,SAAAgB,GACLC,QAAQD,MAAM,oBAAqBA,EACrC,GAEN,GFsBF,G","sources":["webpack://personal-portfolio/./script.js","webpack://personal-portfolio/./src/components/Navbar/Navbar.js","webpack://personal-portfolio/./src/projects/projects.js"],"sourcesContent":["import './styles.css'; // Import global styles\nimport './src/components/Navbar/Navbar.css'; // Import Navbar styles\n// Add other CSS imports if needed (e.g., projects.css, Hero.css)\nimport './src/projects/projects.css';\n// import './src/components/Hero/Hero.css'; // Assuming you might have this from previous task\n\nimport { createNavbar } from './src/components/Navbar/Navbar.js';\nimport { preloadProjectPages } from './src/projects/projects.js';\n\n/**\n * Applies the saved theme from localStorage immediately on script load.\n */\nfunction applySavedTheme() {\n  const savedTheme = localStorage.getItem(\"theme\");\n  const themeToApply = savedTheme ? savedTheme : 'dark';\n  document.documentElement.setAttribute(\"data-theme\", themeToApply);\n}\n\n/**\n * Toggles the theme between 'dark' and 'light' and saves the preference.\n */\nexport function toggleTheme() {\n  const html = document.documentElement;\n  const currentTheme = html.getAttribute(\"data-theme\");\n  const newTheme = currentTheme === \"dark\" ? \"light\" : \"dark\";\n  html.setAttribute(\"data-theme\", newTheme);\n  localStorage.setItem(\"theme\", newTheme);\n}\n\napplySavedTheme();\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const navbarContainer = document.getElementById('navbar-container');\n  if (navbarContainer) {\n    createNavbar(navbarContainer, toggleTheme); // Pass toggleTheme\n  }\n\n  preloadProjectPages();\n});\n","/**\n * Navbar Component\n * Creates and returns a navbar element with logo, navigation links, and theme toggle\n */\n// Removed import { toggleTheme } from '../../script.js';\n\nexport function createNavbar(container, toggleThemeCallback) { // Added toggleThemeCallback parameter\n  const navbar = document.createElement('nav');\n  navbar.className = 'navbar';\n\n  const logo = document.createElement('div');\n  logo.className = 'logo';\n  logo.textContent = 'Aneesh';\n  navbar.appendChild(logo);\n\n  const navLinks = document.createElement('ul');\n  navLinks.className = 'nav-links';\n\n  const links = [\n    { text: 'Home', href: 'index.html' },\n    { text: 'Work', href: 'index.html#work' },\n    { text: 'About', href: 'about.html' },\n    { text: 'Resume', href: 'https://your-drive-resume-link', target: '_blank' }\n  ];\n\n  links.forEach(link => {\n    const li = document.createElement('li');\n    const a = document.createElement('a');\n    a.href = link.href;\n    a.textContent = link.text;\n    if (link.target) a.target = link.target;\n    li.appendChild(a);\n    navLinks.appendChild(li);\n  });\n\n  navbar.appendChild(navLinks);\n\n  const themeToggle = document.createElement('button');\n  themeToggle.id = 'themeToggle';\n  themeToggle.textContent = 'ðŸŒ“';\n  themeToggle.addEventListener('click', toggleThemeCallback); // Use the passed callback\n  navbar.appendChild(themeToggle);\n\n  if (container) {\n    container.appendChild(navbar);\n  }\n\n  return navbar;\n}\n","export function preloadProjectPages() {\n  const projectLinks = document.querySelectorAll('.project-card-link');\n  projectLinks.forEach(link => {\n    const href = link.getAttribute('href');\n    if (href) {\n      fetch(href)\n        .then(response => {\n          if (response.ok) {\n            return response.text();\n          }\n          throw new Error(`Failed to preload ${href}`);\n        })\n        .catch(error => {\n          console.error('Preloading error:', error);\n        });\n    }\n  });\n}\n"],"names":["toggleTheme","html","document","documentElement","newTheme","getAttribute","setAttribute","localStorage","setItem","themeToApply","getItem","addEventListener","navbarContainer","getElementById","container","toggleThemeCallback","navbar","createElement","className","logo","textContent","appendChild","navLinks","text","href","target","forEach","link","li","a","themeToggle","id","createNavbar","querySelectorAll","fetch","then","response","ok","Error","concat","error","console"],"sourceRoot":""}